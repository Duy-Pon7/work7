<?php
$pageTitle = "Word Cloud Generator";
include 'partials/header.php';
?>
<div class="row">
    <div class="col-sm-2 bg-gray">
    </div>
    <div class="col-sm-8 bg-gray">
        <h1 class="text-center fw-bold mt-4">Word Cloud Generator</h1>
        <p class="text-center mb-4 border-bottom pb-4 border-dark">Tr√¨nh t·∫°o ƒë√°m m√¢y t·ª´</p>
        <!-- Input Section -->
        <div class="mb-4">
            <textarea id="text-input" class="form-control" rows="6" placeholder="Nh·∫≠p vƒÉn b·∫£n c·ªßa b·∫°n t·∫°i ƒë√¢y..." maxlength="4000"></textarea>
        </div>
        <!-- Checkbox ch·ªçn Key word = 2 -->
        <div class="mb-4 text-center">
            <label for="ngram-checkbox" class="form-label">
                <input type="checkbox" id="ngram-checkbox"> Key_word = 2
            </label>
            <label for="remove-stopwords-checkbox" class="form-label">
                <input type="checkbox" id="remove-stopwords-checkbox"> Lo·∫°i b·ªè t·ª´ kh√¥ng c√≥ nghƒ©a
            </label>
        </div>

        <!-- N√∫t ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng t·ª´ -->
        <div class="mb-4 text-center">
            <label for="word-count" class="form-label">Ch·ªçn s·ªë l∆∞·ª£ng t·ª´ hi·ªÉn th·ªã tr√™n Word Cloud:</label>
            <input type="number" id="word-count" class="form-control w-50 mx-auto text-center" value="10" min="1" max="50">
        </div>

        <!-- Generate Button -->
        <div class="text-center">
            <button id="generate-button" class="btn btn-primary">T·∫°o Word Cloud</button>
        </div>

        <!-- Word Cloud v√† B·∫£ng -->
        <div class="row mt-5 mb-5">
            <!-- Word Cloud -->
            <div class="col-md-8">
                <h4 class="text-center">Word Cloud</h4>
                <div id="word-cloud-canvas" class="border p-4 bg-white" style="min-height: 300px;">
                    <p class="text-muted text-center">Word Cloud s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y...</p>
                </div>
            </div>

            <!-- B·∫£ng T·ª´ -->
            <div class="col-md-4">
                <h4 class="text-center">Danh s√°ch t·ª´</h4>
                <table id="word-table" class="table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>T·ª´</th>
                            <th>S·ªë l∆∞·ª£t</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="text-muted text-center" colspan="3">B·∫£ng d·ªØ li·ªáu s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <h4 class="mt-3 p-2 text-center">N·∫øu b·∫°n l·∫ßn ƒë·∫ßu ƒë·∫øn v·ªõi H·ªçc T·∫≠p IT</h4>
        <p class="text-center ms-5 me-5 mb-4 border-bottom pb-4 border-dark"> M·ªôt s·ªë h∆∞·ªõng d·∫´n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p.</p>
        <div class="accordion mb-5" id="accordionPanelsStayOpenExample">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseThree" aria-expanded="false" aria-controls="panelsStayOpen-collapseThree">

                        <strong>Word cloud generator</strong>
                    </button>
                </h2>
                <div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        ƒê√°m m√¢y t·ª´ (Word cloud generator) gi√∫p t·∫°o ra m·ªôt h√¨nh ·∫£nh tr·ª±c quan, th·ªÉ hi·ªán t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c t·ª´ trong m·ªôt t·∫≠p d·ªØ li·ªáu.
                        <br><br>
                        ƒê·ªëi t∆∞·ª£ng: T·∫•t c·∫£ m·ªçi ng∆∞·ªùi
                        <ul>
                            <li>Ng∆∞·ªùi mu·ªën t√¨m hi·ªÉu v·ªÅ c√°c k·ªπ nƒÉng ch√≠nh (key skills) trong ng√†nh ngh·ªÅ ho·∫∑c lƒ©nh v·ª±c m√† m√¨nh ƒëang theo ƒëu·ªïi.</li>
                        </ul>
                        H∆∞·ªõng d·∫´n:
                        <ul>
                            <li>B∆∞·ªõc 1: V√†o c√°c trang tuy·ªÉn d·ª•ng, t√¨m ki·∫øm "ng√†nh ngh·ªÅ, lƒ©nh v·ª±c" m√† m√¨nh mu·ªën t√¨m hi·ªÉu.</li>
                            <li>B∆∞·ªõc 2: V√†o ph·∫ßn "Y√™u c·∫ßu ·ª©ng vi√™n" sao ch√©p n·ªôi dung c·ªßa nhi·ªÅu ƒë∆°n tuy·ªÉn d·ª•ng.</li>
                            <li>B∆∞·ªõc 3: D√°n v√†o word cloud generator ƒë·ªÉ xem th·ª≠ c√°c <strong>t·ª´ kh√≥a ph·ªï bi·∫øn v√† quan tr·ªçng</strong>.</li>
                            <li>B∆∞·ªõc 4: Ph√¢n t√≠ch c√°c t·ª´ xu·∫•t hi·ªán nhi·ªÅu trong word cloud ƒë·ªÉ nh·∫≠n di·ªán c√°c k·ªπ nƒÉng ch√≠nh v√† xu h∆∞·ªõng y√™u c·∫ßu trong ng√†nh.</li>
                            <li>B∆∞·ªõc 5: D·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch, l·∫≠p k·∫ø ho·∫°ch h·ªçc h·ªèi v√† ph√°t tri·ªÉn c√°c k·ªπ nƒÉng c·∫ßn thi·∫øt ƒë·ªÉ ƒë√°p ·ª©ng y√™u c·∫ßu c√¥ng vi·ªác trong ng√†nh ngh·ªÅ ƒë√≥.</li>
                            <li>B∆∞·ªõc 6: Thi·∫øt k·∫ø cv, resume. Copy d√°n v√†o word cloud v√† so s√°ch v·ªõi k·∫ø qu·∫£ ph√¢n t√≠ch tr∆∞·ªõc sao cho ph√π h·ª£p nh·∫•t.</li>
                            <li>B∆∞·ªõc 7: Ti·∫øp t·ª•c h·ªçc t·∫≠p, ph√°t tri·ªÉn v√† ch·ªù ƒë·ª£i nh·ªØng c∆° h·ªôi b∆∞·ªõc ƒë·∫øn.</li>
                        </ul>
                        <p>Ch√∫c m·ªçi ng∆∞·ªùi t√¨m ƒë∆∞·ª£c c√¥ng vi·ªác ph√π h·ª£p cho m√¨nh! üçÄ</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-2 bg-gray">
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/wordcloud2.js/1.1.1/wordcloud2.min.js"></script>
<script>
    // M·∫£ng c√°c t·ª´ kh√¥ng c√≥ nghƒ©a (stop words)
    const stopWordsEnglish = [
        "a", "an", "the", "and", "or", "but", "so", "of", "on", "in", "at", "to",
        "with", "for", "from", "by", "is", "are", "was", "were", "be", "been",
        "has", "have", "had", "do", "does", "did", "not", "this", "that", "these", "those"
    ];

    const stopWordsVietnamese = [
        "v√†", "ho·∫∑c", "nh∆∞ng", "n√™n", "v√¨", "c·ªßa", "trong", "t·∫°i", "ƒë·∫øn", "v·ªõi",
        "cho", "t·ª´", "b·ªüi", "l√†", "ƒë√£", "c√≥", "kh√¥ng", "n√†y", "kia", "ƒë√≥", "·∫•y", "m·ªôt",
        "c√°i", "c√°c", "nh·ªØng", "ch·ªâ", "c√¥ng", "kinh", "vi·ªác", "tri·ªÉn", "v·ªÅ", "l√†m", "ph√°t",
        "nghi·ªám", "d·ª•ng", "tr√¨nh", "h·ªá", "·ª©ng", "ph·∫ßn", "m·ªÅm", "l·∫≠p", "th·ªëng", "hi·ªÉu",
        "tham", "gia", "ƒë·ªÉ", "li·ªáu", "vi√™n", "bi·∫øt", "s·ª≠", "v√†o", "y√™u", "c·∫ßu", "b·∫£o", "h·ª£p",
        "hi·ªán", "l√Ω", "nƒÉng", "th√†nh", "thi·∫øt", "k·∫ø", "khai", "theo", "d·ª±", "√°n", "t√≠ch", "t·ªëi",
        "∆∞u", "th·ª±c", "ngh·ªá", "d·ªØ", "kh√°c", "hi·ªáu", "c∆°", "ki·∫øn", "c·ª•", "qu·∫£n", "m√¥", "h√¨nh",
        "duy", "tr√¨", "ty", "h√≥a", "h·ªó", "tr·ª£", "v·ª•", "nh√≥m", " c√≥", "v√†", "nhi·ªÅu",
    ];

    // L·∫Øng nghe s·ª± ki·ªán nh·∫•n n√∫t "T·∫°o Word Cloud"
    document.getElementById('generate-button').addEventListener('click', function() {
        // L·∫•y vƒÉn b·∫£n ng∆∞·ªùi d√πng nh·∫≠p v√†o
        const text = document.getElementById('text-input').value;

        if (!text.trim()) {
            alert('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n!');
            return;
        }

        // L·∫•y s·ªë l∆∞·ª£ng t·ª´ ng∆∞·ªùi d√πng mu·ªën hi·ªÉn th·ªã tr√™n Word Cloud
        const wordCount = parseInt(document.getElementById('word-count').value);

        // Ki·ªÉm tra tr·∫°ng th√°i checkbox
        const isRemoveStopWordsChecked = document.getElementById('remove-stopwords-checkbox').checked;
        const isNgramChecked = document.getElementById('ngram-checkbox').checked;

        // T√°ch t·ª´ v√† √°p d·ª•ng c∆° ch·∫ø N-gram n·∫øu checkbox ƒë∆∞·ª£c tick
        const words = text.split(/\s+/);
        let wordFrequency = {};

        if (isNgramChecked) {
            // T·∫°o N-gram (n = 2)
            for (let i = 0; i < words.length - 1; i++) {
                const ngram = `${words[i].toLowerCase().replace(/[^a-zA-Z√Ä-·ªπ ]/g, '')} ${
                words[i + 1].toLowerCase().replace(/[^a-zA-Z√Ä-·ªπ ]/g, '')
            }`;
                if (ngram.trim()) {
                    wordFrequency[ngram] = (wordFrequency[ngram] || 0) + 1;
                }
            }
        } else {
            // X·ª≠ l√Ω t·ª´ng t·ª´ th√¥ng th∆∞·ªùng
            words.forEach(word => {
                word = word.toLowerCase().replace(/[^a-zA-Z√Ä-·ªπ ]/g, '');
                if (word) {
                    wordFrequency[word] = (wordFrequency[word] || 0) + 1;
                }
            });
        }

        // Lo·∫°i b·ªè t·ª´ kh√¥ng c√≥ nghƒ©a n·∫øu checkbox ƒë∆∞·ª£c tick
        if (isRemoveStopWordsChecked) {
            const allStopWords = new Set([...stopWordsEnglish, ...stopWordsVietnamese]);
            wordFrequency = Object.fromEntries(
                Object.entries(wordFrequency).filter(([word]) => !allStopWords.has(word))
            );
        }

        // S·∫Øp x·∫øp c√°c t·ª´ theo t·∫ßn su·∫•t gi·∫£m d·∫ßn
        const sortedWords = Object.entries(wordFrequency).sort((a, b) => b[1] - a[1]);

        // L·ªçc theo s·ªë l∆∞·ª£ng t·ª´ ng∆∞·ªùi d√πng mu·ªën hi·ªÉn th·ªã
        const selectedWords = sortedWords.slice(0, wordCount);

        // G·ªçi h√†m v·∫Ω l·∫°i Word Cloud v√† c·∫≠p nh·∫≠t b·∫£ng t·ª´
        drawWordCloud(selectedWords);
    });

    // H√†m v·∫Ω Word Cloud
    const drawWordCloud = (words) => {
        if (WordCloud.isSupported) {
            const wordCloudCanvas = document.getElementById('word-cloud-canvas');
            const options = {
                list: words,
                gridSize: 10,
                weightFactor: 8,
                fontFamily: "sans-serif",
                color: 'random-dark',
                rotateRatio: 0,
                shape: "circle",
                ellipticity: 0.6,
                shrinkToFit: true,
                minSize: 6,
                classes: 'word-cloud-item'
            };
            WordCloud(wordCloudCanvas, options);

            // C·∫≠p nh·∫≠t b·∫£ng t·ª´
            const tableBody = document.getElementById('word-table').querySelector('tbody');
            tableBody.innerHTML = ''; // X√≥a b·∫£ng c≈©

            words.forEach(([word, frequency], index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                <td>${index + 1}</td>
                <td>
                    <input type="checkbox" class="word-checkbox" data-word="${word}" checked>
                    ${word}
                </td>
                <td>${frequency}</td>
            `;
                tableBody.appendChild(row);
            });

            // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi checkbox
            const checkboxes = document.querySelectorAll('.word-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', handleCheckboxChange);
            });
        } else {
            console.log('WordCloud not supported');
        }
    };

    // X·ª≠ l√Ω khi checkbox thay ƒë·ªïi
    const handleCheckboxChange = () => {
        const checkboxes = document.querySelectorAll('.word-checkbox');
        const selectedWords = Array.from(checkboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => {
                const word = checkbox.dataset.word;
                const frequency = parseInt(checkbox.closest('tr').querySelector('td:last-child').textContent);
                return [word, frequency];
            });

        // V·∫Ω l·∫°i Word Cloud v·ªõi t·ª´ ƒë∆∞·ª£c ch·ªçn
        drawWordCloud(selectedWords);
    };
</script>


<?php include 'partials/footer.php'; ?>